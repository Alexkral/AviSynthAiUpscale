// KrigBilateral by Shiandow
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library.


sampler s0 : register(s0);
sampler s1 : register(s1);
sampler s2 : register(s2);
float4 p2 :  register(c2);
float p3  :  register(c3);

#define sqr(x) dot(x,x)
#define Kernel(x) (cos(acos(-1.0)*(x)/3.0))
#define ChromaOffset (float2(p3, 0))
#define GetY(coord) tex2D(s2, p2.zw * (pos + coord + float2(0.5, 0.5))).xy
#define GetUV(coord) tex2D(s0, p2.zw * (pos + coord + float2(0.5, 0.5))).xy
#define M(i,j) Mx[min(i,j)*8 + max(i,j) - min(i,j)*(min(i,j)+1)/2]
#define C(i,j) (rsqrt(1.0 + (X[i].y + X[j].y)/localVar) * exp(-0.5*(sqr(X[i].x - X[j].x)/(localVar + X[i].y + X[j].y) + sqr(coords[i] - coords[j]))) + (X[i].x - y) * (X[j].x - y) / localVar)
#define c(i) (rsqrt(1.0 + X[i].y/localVar) * exp(-0.5*(sqr(X[i].x - y)/(localVar + X[i].y) + sqr(coords[i] - offset))))

float4 main(float2 tex : TEXCOORD0) : COLOR
{
    float y = tex2D(s1, tex).x, Mx[36], b[8];
    float4 X[9], total = 0; float2 coords[9];
    float2 pos = tex * p2.xy + ChromaOffset - float2(0.5, 0.5);
    float2 offset = pos - round(pos);
    pos -= offset;

    coords[0] = float2(-1,-1); coords[1] = float2(-1, 0); coords[2] = float2(-1, 1);
    coords[3] = float2( 0,-1); coords[4] = float2( 0, 1); coords[5] = float2( 1,-1);
    coords[6] = float2( 1, 0); coords[7] = float2( 1, 1); coords[8] = float2( 0, 0);

    [unroll] for (int i=0; i<9; i++) {
	X[i] = float4(GetY(coords[i]), GetUV(coords[i]));
    }

    [loop] for (i=0; i<9; i++) {
        float2 w = saturate(1.5 - abs(coords[i] - offset));
        total += w.x*w.y*float4(X[i].x, pow(X[i].x, 2.0), X[i].y, 1.0);
    }

    total.xyz /= total.w;
    float localVar = sqr(0.05) + abs(total.y - pow(total.x, 2.0)) + total.z;
    float4 interp = X[8];

    b[0] = c(0) - c(8) - C(0,8) + C(8,8); M(0, 0) = C(0,0) - C(0,8) - C(0,8) + C(8,8); M(0, 1) = C(0,1) - C(1,8) - C(0,8) + C(8,8); M(0, 2) = C(0,2) - C(2,8) - C(0,8) + C(8,8); M(0, 3) = C(0,3) - C(3,8) - C(0,8) + C(8,8); M(0, 4) = C(0,4) - C(4,8) - C(0,8) + C(8,8); M(0, 5) = C(0,5) - C(5,8) - C(0,8) + C(8,8); M(0, 6) = C(0,6) - C(6,8) - C(0,8) + C(8,8); M(0, 7) = C(0,7) - C(7,8) - C(0,8) + C(8,8);
    b[1] = c(1) - c(8) - C(1,8) + C(8,8); M(1, 1) = C(1,1) - C(1,8) - C(1,8) + C(8,8); M(1, 2) = C(1,2) - C(2,8) - C(1,8) + C(8,8); M(1, 3) = C(1,3) - C(3,8) - C(1,8) + C(8,8); M(1, 4) = C(1,4) - C(4,8) - C(1,8) + C(8,8); M(1, 5) = C(1,5) - C(5,8) - C(1,8) + C(8,8); M(1, 6) = C(1,6) - C(6,8) - C(1,8) + C(8,8); M(1, 7) = C(1,7) - C(7,8) - C(1,8) + C(8,8);
    b[2] = c(2) - c(8) - C(2,8) + C(8,8); M(2, 2) = C(2,2) - C(2,8) - C(2,8) + C(8,8); M(2, 3) = C(2,3) - C(3,8) - C(2,8) + C(8,8); M(2, 4) = C(2,4) - C(4,8) - C(2,8) + C(8,8); M(2, 5) = C(2,5) - C(5,8) - C(2,8) + C(8,8); M(2, 6) = C(2,6) - C(6,8) - C(2,8) + C(8,8); M(2, 7) = C(2,7) - C(7,8) - C(2,8) + C(8,8);
    b[3] = c(3) - c(8) - C(3,8) + C(8,8); M(3, 3) = C(3,3) - C(3,8) - C(3,8) + C(8,8); M(3, 4) = C(3,4) - C(4,8) - C(3,8) + C(8,8); M(3, 5) = C(3,5) - C(5,8) - C(3,8) + C(8,8); M(3, 6) = C(3,6) - C(6,8) - C(3,8) + C(8,8); M(3, 7) = C(3,7) - C(7,8) - C(3,8) + C(8,8);
    b[4] = c(4) - c(8) - C(4,8) + C(8,8); M(4, 4) = C(4,4) - C(4,8) - C(4,8) + C(8,8); M(4, 5) = C(4,5) - C(5,8) - C(4,8) + C(8,8); M(4, 6) = C(4,6) - C(6,8) - C(4,8) + C(8,8); M(4, 7) = C(4,7) - C(7,8) - C(4,8) + C(8,8);
    b[5] = c(5) - c(8) - C(5,8) + C(8,8); M(5, 5) = C(5,5) - C(5,8) - C(5,8) + C(8,8); M(5, 6) = C(5,6) - C(6,8) - C(5,8) + C(8,8); M(5, 7) = C(5,7) - C(7,8) - C(5,8) + C(8,8);
    b[6] = c(6) - c(8) - C(6,8) + C(8,8); M(6, 6) = C(6,6) - C(6,8) - C(6,8) + C(8,8); M(6, 7) = C(6,7) - C(7,8) - C(6,8) + C(8,8);
    b[7] = c(7) - c(8) - C(7,8) + C(8,8); M(7, 7) = C(7,7) - C(7,8) - C(7,8) + C(8,8);

    b[1] -= b[0] * M(1, 0) / M(0, 0); M(1, 1) -= M(0, 1) * M(1, 0) / M(0, 0); M(1, 2) -= M(0, 2) * M(1, 0) / M(0, 0); M(1, 3) -= M(0, 3) * M(1, 0) / M(0, 0); M(1, 4) -= M(0, 4) * M(1, 0) / M(0, 0); M(1, 5) -= M(0, 5) * M(1, 0) / M(0, 0); M(1, 6) -= M(0, 6) * M(1, 0) / M(0, 0); M(1, 7) -= M(0, 7) * M(1, 0) / M(0, 0);
    b[2] -= b[0] * M(2, 0) / M(0, 0); M(2, 2) -= M(0, 2) * M(2, 0) / M(0, 0); M(2, 3) -= M(0, 3) * M(2, 0) / M(0, 0); M(2, 4) -= M(0, 4) * M(2, 0) / M(0, 0); M(2, 5) -= M(0, 5) * M(2, 0) / M(0, 0); M(2, 6) -= M(0, 6) * M(2, 0) / M(0, 0); M(2, 7) -= M(0, 7) * M(2, 0) / M(0, 0);
    b[3] -= b[0] * M(3, 0) / M(0, 0); M(3, 3) -= M(0, 3) * M(3, 0) / M(0, 0); M(3, 4) -= M(0, 4) * M(3, 0) / M(0, 0); M(3, 5) -= M(0, 5) * M(3, 0) / M(0, 0); M(3, 6) -= M(0, 6) * M(3, 0) / M(0, 0); M(3, 7) -= M(0, 7) * M(3, 0) / M(0, 0);
    b[4] -= b[0] * M(4, 0) / M(0, 0); M(4, 4) -= M(0, 4) * M(4, 0) / M(0, 0); M(4, 5) -= M(0, 5) * M(4, 0) / M(0, 0); M(4, 6) -= M(0, 6) * M(4, 0) / M(0, 0); M(4, 7) -= M(0, 7) * M(4, 0) / M(0, 0);
    b[5] -= b[0] * M(5, 0) / M(0, 0); M(5, 5) -= M(0, 5) * M(5, 0) / M(0, 0); M(5, 6) -= M(0, 6) * M(5, 0) / M(0, 0); M(5, 7) -= M(0, 7) * M(5, 0) / M(0, 0);
    b[6] -= b[0] * M(6, 0) / M(0, 0); M(6, 6) -= M(0, 6) * M(6, 0) / M(0, 0); M(6, 7) -= M(0, 7) * M(6, 0) / M(0, 0);
    b[7] -= b[0] * M(7, 0) / M(0, 0); M(7, 7) -= M(0, 7) * M(7, 0) / M(0, 0);

    b[2] -= b[1] * M(2, 1) / M(1, 1); M(2, 2) -= M(1, 2) * M(2, 1) / M(1, 1); M(2, 3) -= M(1, 3) * M(2, 1) / M(1, 1); M(2, 4) -= M(1, 4) * M(2, 1) / M(1, 1); M(2, 5) -= M(1, 5) * M(2, 1) / M(1, 1); M(2, 6) -= M(1, 6) * M(2, 1) / M(1, 1); M(2, 7) -= M(1, 7) * M(2, 1) / M(1, 1);
    b[3] -= b[1] * M(3, 1) / M(1, 1); M(3, 3) -= M(1, 3) * M(3, 1) / M(1, 1); M(3, 4) -= M(1, 4) * M(3, 1) / M(1, 1); M(3, 5) -= M(1, 5) * M(3, 1) / M(1, 1); M(3, 6) -= M(1, 6) * M(3, 1) / M(1, 1); M(3, 7) -= M(1, 7) * M(3, 1) / M(1, 1);
    b[4] -= b[1] * M(4, 1) / M(1, 1); M(4, 4) -= M(1, 4) * M(4, 1) / M(1, 1); M(4, 5) -= M(1, 5) * M(4, 1) / M(1, 1); M(4, 6) -= M(1, 6) * M(4, 1) / M(1, 1); M(4, 7) -= M(1, 7) * M(4, 1) / M(1, 1);
    b[5] -= b[1] * M(5, 1) / M(1, 1); M(5, 5) -= M(1, 5) * M(5, 1) / M(1, 1); M(5, 6) -= M(1, 6) * M(5, 1) / M(1, 1); M(5, 7) -= M(1, 7) * M(5, 1) / M(1, 1);
    b[6] -= b[1] * M(6, 1) / M(1, 1); M(6, 6) -= M(1, 6) * M(6, 1) / M(1, 1); M(6, 7) -= M(1, 7) * M(6, 1) / M(1, 1);
    b[7] -= b[1] * M(7, 1) / M(1, 1); M(7, 7) -= M(1, 7) * M(7, 1) / M(1, 1);

    b[3] -= b[2] * M(3, 2) / M(2, 2); M(3, 3) -= M(2, 3) * M(3, 2) / M(2, 2); M(3, 4) -= M(2, 4) * M(3, 2) / M(2, 2); M(3, 5) -= M(2, 5) * M(3, 2) / M(2, 2); M(3, 6) -= M(2, 6) * M(3, 2) / M(2, 2); M(3, 7) -= M(2, 7) * M(3, 2) / M(2, 2);
    b[4] -= b[2] * M(4, 2) / M(2, 2); M(4, 4) -= M(2, 4) * M(4, 2) / M(2, 2); M(4, 5) -= M(2, 5) * M(4, 2) / M(2, 2); M(4, 6) -= M(2, 6) * M(4, 2) / M(2, 2); M(4, 7) -= M(2, 7) * M(4, 2) / M(2, 2);
    b[5] -= b[2] * M(5, 2) / M(2, 2); M(5, 5) -= M(2, 5) * M(5, 2) / M(2, 2); M(5, 6) -= M(2, 6) * M(5, 2) / M(2, 2); M(5, 7) -= M(2, 7) * M(5, 2) / M(2, 2);
    b[6] -= b[2] * M(6, 2) / M(2, 2); M(6, 6) -= M(2, 6) * M(6, 2) / M(2, 2); M(6, 7) -= M(2, 7) * M(6, 2) / M(2, 2);
    b[7] -= b[2] * M(7, 2) / M(2, 2); M(7, 7) -= M(2, 7) * M(7, 2) / M(2, 2);

    b[4] -= b[3] * M(4, 3) / M(3, 3); M(4, 4) -= M(3, 4) * M(4, 3) / M(3, 3); M(4, 5) -= M(3, 5) * M(4, 3) / M(3, 3); M(4, 6) -= M(3, 6) * M(4, 3) / M(3, 3); M(4, 7) -= M(3, 7) * M(4, 3) / M(3, 3);
    b[5] -= b[3] * M(5, 3) / M(3, 3); M(5, 5) -= M(3, 5) * M(5, 3) / M(3, 3); M(5, 6) -= M(3, 6) * M(5, 3) / M(3, 3); M(5, 7) -= M(3, 7) * M(5, 3) / M(3, 3);
    b[6] -= b[3] * M(6, 3) / M(3, 3); M(6, 6) -= M(3, 6) * M(6, 3) / M(3, 3); M(6, 7) -= M(3, 7) * M(6, 3) / M(3, 3);
    b[7] -= b[3] * M(7, 3) / M(3, 3); M(7, 7) -= M(3, 7) * M(7, 3) / M(3, 3);

    b[5] -= b[4] * M(5, 4) / M(4, 4); M(5, 5) -= M(4, 5) * M(5, 4) / M(4, 4); M(5, 6) -= M(4, 6) * M(5, 4) / M(4, 4); M(5, 7) -= M(4, 7) * M(5, 4) / M(4, 4);
    b[6] -= b[4] * M(6, 4) / M(4, 4); M(6, 6) -= M(4, 6) * M(6, 4) / M(4, 4); M(6, 7) -= M(4, 7) * M(6, 4) / M(4, 4);
    b[7] -= b[4] * M(7, 4) / M(4, 4); M(7, 7) -= M(4, 7) * M(7, 4) / M(4, 4);

    b[6] -= b[5] * M(6, 5) / M(5, 5); M(6, 6) -= M(5, 6) * M(6, 5) / M(5, 5); M(6, 7) -= M(5, 7) * M(6, 5) / M(5, 5);
    b[7] -= b[5] * M(7, 5) / M(5, 5); M(7, 7) -= M(5, 7) * M(7, 5) / M(5, 5);

    b[7] -= b[6] * M(7, 6) / M(6, 6); M(7, 7) -= M(6, 7) * M(7, 6) / M(6, 6);

    b[7] /= M(7, 7);
    interp += b[7] * (X[7] - X[8]);

    b[6] -= M(6, 7) * b[7]; b[6] /= M(6, 6);
    interp += b[6] * (X[6] - X[8]);

    b[5] -= M(5, 6) * b[6]; b[5] -= M(5, 7) * b[7]; b[5] /= M(5, 5);
    interp += b[5] * (X[5] - X[8]);

    b[4] -= M(4, 5) * b[5]; b[4] -= M(4, 6) * b[6]; b[4] -= M(4, 7) * b[7]; b[4] /= M(4, 4);
    interp += b[4] * (X[4] - X[8]);

    b[3] -= M(3, 4) * b[4]; b[3] -= M(3, 5) * b[5]; b[3] -= M(3, 6) * b[6]; b[3] -= M(3, 7) * b[7]; b[3] /= M(3, 3);
    interp += b[3] * (X[3] - X[8]);

    b[2] -= M(2, 3) * b[3]; b[2] -= M(2, 4) * b[4]; b[2] -= M(2, 5) * b[5]; b[2] -= M(2, 6) * b[6]; b[2] -= M(2, 7) * b[7]; b[2] /= M(2, 2);
    interp += b[2] * (X[2] - X[8]);

    b[1] -= M(1, 2) * b[2]; b[1] -= M(1, 3) * b[3]; b[1] -= M(1, 4) * b[4]; b[1] -= M(1, 5) * b[5]; b[1] -= M(1, 6) * b[6]; b[1] -= M(1, 7) * b[7]; b[1] /= M(1, 1);
    interp += b[1] * (X[1] - X[8]);

    b[0] -= M(0, 1) * b[1]; b[0] -= M(0, 2) * b[2]; b[0] -= M(0, 3) * b[3]; b[0] -= M(0, 4) * b[4]; b[0] -= M(0, 5) * b[5]; b[0] -= M(0, 6) * b[6]; b[0] -= M(0, 7) * b[7]; b[0] /= M(0, 0);
    interp += b[0] * (X[0] - X[8]);

    return interp.zwxx;
}
